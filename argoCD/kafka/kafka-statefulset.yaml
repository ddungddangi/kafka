apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-controller
  namespace: default
  labels:
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/instance: kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.2.1
    argocd.argoproj.io/instance: kafka
spec:
  serviceName: kafka-controller-headless
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/instance: kafka
      app.kubernetes.io/name: kafka
      app.kubernetes.io/part-of: kafka
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller-eligible
        app.kubernetes.io/instance: kafka
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kafka
        app.kubernetes.io/part-of: kafka
        app.kubernetes.io/version: 4.0.0
        helm.sh/chart: kafka-32.2.1
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: controller-eligible
                  app.kubernetes.io/instance: kafka
                  app.kubernetes.io/name: kafka
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: false
      containers:
      - name: kafka
        image: docker.io/bitnami/kafka:4.0.0-debian-12-r3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9093
          name: controller
        - containerPort: 9092
          name: client
        - containerPort: 9094
          name: interbroker
        env:
        - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
          value: CONTROLLER
        - name: KAFKA_CFG_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
        - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
          value: "0@kafka-controller-0.kafka-controller-headless.default.svc.cluster.local:9093,1@kafka-controller-1.kafka-controller-headless.default.svc.cluster.local:9093,2@kafka-controller-2.kafka-controller-headless.default.svc.cluster.local:9093"
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: kafka-credentials
              key: username
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-credentials
              key: password
        livenessProbe:
          exec:
            command:
            - pgrep
            - -f
            - kafka
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: controller
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 6
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 750m
            ephemeral-storage: 2Gi
            memory: 768Mi
          requests:
            cpu: 500m
            ephemeral-storage: 50Mi
            memory: 512Mi
        volumeMounts:
        - mountPath: /bitnami/kafka
          name: data
        - mountPath: /opt/bitnami/kafka/logs
          name: logs
        - mountPath: /opt/bitnami/kafka/config/server.properties
          name: kafka-config
          subPath: server.properties
        - mountPath: /tmp
          name: tmp
        - mountPath: /shared
          name: init-shared
        - mountPath: /opt/bitnami/kafka/config/secrets
          name: kafka-sasl
          readOnly: true
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: prepare-config
        image: docker.io/bitnami/kafka:4.0.0-debian-12-r3
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
          - -ec
          - |
            POD_ID=$(hostname | awk -F '-' '{print $NF}')
            echo "node.id=$POD_ID" >> /opt/bitnami/kafka/config/server.properties
            echo "process.roles=broker,controller" >> /opt/bitnami/kafka/config/server.properties
            echo "controller.quorum.voters=0@kafka-controller-0.kafka-controller-headless.default.svc.cluster.local:9093,1@kafka-controller-1.kafka-controller-headless.default.svc.cluster.local:9093,2@kafka-controller-2.kafka-controller-headless.default.svc.cluster.local:9093" >> /opt/bitnami/kafka/config/server.properties
            echo "listeners=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093" >> /opt/bitnami/kafka/config/server.properties
            echo "listener.security.protocol.map=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT" >> /opt/bitnami/kafka/config/server.properties
            echo "inter.broker.listener.name=PLAINTEXT" >> /opt/bitnami/kafka/config/server.properties
        volumeMounts:
        - mountPath: /opt/bitnami/kafka/config
          name: kafka-config
      terminationGracePeriodSeconds: 30
      serviceAccountName: kafka
      dnsPolicy: ClusterFirst
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      storageClassName: nfs-client
      volumeMode: Filesystem

